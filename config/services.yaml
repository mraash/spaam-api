parameters:
    exceptions:
        # Symfony http exceptions
        Symfony\Component\HttpKernel\Exception\BadRequestHttpException: { httpCode: 400, visible: true },
        Symfony\Component\Security\Core\Exception\AccessDeniedException: { httpCode: 403, visible: true },
        Symfony\Component\HttpKernel\Exception\NotFoundHttpException: { httpCode: 404, visible: true },
        Symfony\Component\HttpKernel\Exception\MethodNotAllowedHttpException: { httpCode: 405, visible: true },

        # App exceptions
        SymfonyExtension\Http\Input\Builder\Exception\JsonBodyDecodeException: { httpCode: 400, visible: true },
        App\Domain\Service\User\Exceptions\UserAlreadyExistsException: { httpCode: 400, visible: true },
        App\Domain\Service\VkAccount\Exception\VkAccountAlreadyAddedException: { httpCode: 400, visible: true },
        App\Domain\Service\VkAccount\Exception\VkAccountNotFoundException: { httpCode: 404, visible: true },
        App\Domain\Service\SpamPanel\Exception\SpamPanelNotFoundException: { httpCode: 404, visible: true },
        App\Domain\Service\SpamPanel\Exception\EmptyTextListException: { httpCode: 409, visible: true },
        App\Domain\Service\Vk\Exception\RecipientNotFoundException: { httpCode: 409, visible: true },
        App\Domain\Service\Vk\Exception\MessageNotAllowedException: { httpCode: 409, visible: true },
        App\Domain\Service\Vk\Exception\CaptchaException: { httpCode: 409, visible: true },

services:
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            bool $isDev: '@=container.getParameter("kernel.environment") == "dev"'
            bool $isProd: '@=container.getParameter("kernel.environment") == "prod"'
            bool $isDebug: '%kernel.debug%'
            int $vkAppId: '%env(MY_VK_APP)%'
            string $vkApiVersion: '5.131'

    # Namespaces
    App\:
        resource: '../src/App/'
        exclude:
            - '../src/App/Domain/Entity/'
            - '../src/App/Kernel.php'
    Tests\App\Mock\:
        resource: '../tests/App/Mock'
    SymfonyExtension\:
        resource: '../src/SymfonyExtension/'


    # Integrations
    App\Integration\VKontakte\Interface\VkApiInterface: '@App\Integration\VKontakte\VkApi'

    # Services
    App\Http\ExceptionHandler\Uncaught\ExceptionResolver:
        arguments:
            $rawMetadataList: '%exceptions%'

    # Listeners
    App\Http\ExceptionHandler\Uncaught\ApiExceptionListener:
        tags:
            - { name: kernel.event_listener, event: kernel.exception, priority: 10 }
    App\Http\ExceptionHandler\Validation\ValidationExceptionListener:
        tags:
            - { name: kernel.event_listener, event: kernel.exception, priority: 15 }
    App\Http\Security\Listener\JwtCreatedListener:
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_created }
    App\Http\Security\Listener\AuthenticationSuccessListener:
        tags:
            - {
                name: kernel.event_listener,
                event: lexik_jwt_authentication.on_authentication_success,
                priority: -1,
                method: onSuccessResponse
            }
    App\Http\Security\Listener\AuthenticationFailureListener:
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_authentication_failure, method: onInvalidCredentials }
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_invalid, method: onInvalidJwt }
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_not_found, method: onJWTNotFound }
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_expired, method: onJWTExpired }
    App\Http\Security\Listener\RefreshFailureListener:
        tags:
            - { name: kernel.event_listener, event: gesdinet.refresh_token_failure , method: onTokenInvalid }
            - { name: kernel.event_listener, event: gesdinet.refresh_token_not_found, method: onTokenNotFound }
